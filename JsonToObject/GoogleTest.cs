using JsonToObject.Google;
using System;
using System.IO;
using System.Net;

namespace JsonToObject
{
    public static class GoogleTest
    {
        public static void CreateObject()
        {
            var jsonString = GET("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=43.319271,-87.952040&radius=105&type=bar&key=AIzaSyCm51Yofz7jCEmtkvN4mFady9iETRhqm_s");
            var googleResult = GoogleResult.FromJson(jsonString);
            string name = googleResult.Results[0].Name;
            Console.WriteLine(name);
        }

        private static string GET(string url)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            try
            {
                WebResponse response = request.GetResponse();
                using (Stream responseStream = response.GetResponseStream())
                {
                    StreamReader reader = new StreamReader(responseStream, System.Text.Encoding.UTF8);
                    return reader.ReadToEnd();
                }
            }
            catch (WebException ex)
            {
                WebResponse errorResponse = ex.Response;
                using (Stream responseStream = errorResponse.GetResponseStream())
                {
                    StreamReader reader = new StreamReader(responseStream, System.Text.Encoding.GetEncoding("utf-8"));
                    String errorText = reader.ReadToEnd();
                    // log errorText
                }
                throw;
            }
        }

    }

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using Google;
    //
    //    var googleResult = GoogleResult.FromJson(jsonString);

    namespace Google
    {
        using System;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class GoogleResult
        {
            [JsonProperty("html_attributions")]
            public object[] HtmlAttributions { get; set; }

            [JsonProperty("results")]
            public Result[] Results { get; set; }

            [JsonProperty("status")]
            public string Status { get; set; }
        }

        public partial class Result
        {
            [JsonProperty("geometry")]
            public Geometry Geometry { get; set; }

            [JsonProperty("icon")]
            public Uri Icon { get; set; }

            [JsonProperty("id")]
            public string Id { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("opening_hours")]
            public OpeningHours OpeningHours { get; set; }

            [JsonProperty("photos")]
            public Photo[] Photos { get; set; }

            [JsonProperty("place_id")]
            public string PlaceId { get; set; }

            [JsonProperty("plus_code")]
            public PlusCode PlusCode { get; set; }

            [JsonProperty("rating")]
            public double Rating { get; set; }

            [JsonProperty("reference")]
            public string Reference { get; set; }

            [JsonProperty("scope")]
            public string Scope { get; set; }

            [JsonProperty("types")]
            public string[] Types { get; set; }

            [JsonProperty("vicinity")]
            public string Vicinity { get; set; }
        }

        public partial class Geometry
        {
            [JsonProperty("location")]
            public Location Location { get; set; }

            [JsonProperty("viewport")]
            public Viewport Viewport { get; set; }
        }

        public partial class Location
        {
            [JsonProperty("lat")]
            public double Lat { get; set; }

            [JsonProperty("lng")]
            public double Lng { get; set; }
        }

        public partial class Viewport
        {
            [JsonProperty("northeast")]
            public Location Northeast { get; set; }

            [JsonProperty("southwest")]
            public Location Southwest { get; set; }
        }

        public partial class OpeningHours
        {
            [JsonProperty("open_now")]
            public bool OpenNow { get; set; }
        }

        public partial class Photo
        {
            [JsonProperty("height")]
            public long Height { get; set; }

            [JsonProperty("html_attributions")]
            public string[] HtmlAttributions { get; set; }

            [JsonProperty("photo_reference")]
            public string PhotoReference { get; set; }

            [JsonProperty("width")]
            public long Width { get; set; }
        }

        public partial class PlusCode
        {
            [JsonProperty("compound_code")]
            public string CompoundCode { get; set; }

            [JsonProperty("global_code")]
            public string GlobalCode { get; set; }
        }

        public partial class GoogleResult
        {
            public static GoogleResult FromJson(string json) => JsonConvert.DeserializeObject<GoogleResult>(json, Google.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this GoogleResult self) => JsonConvert.SerializeObject(self, Google.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}
